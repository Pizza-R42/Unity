/*
    This is the main inventory script
    Attatch this to any gameObject and set the inventory size in the inspector
    Make sure TextMeshPro is installed

    The items used are ScriptableObjects and are created in the inspector by in the project folder,
    (Right Click, Create, Inventory, Item)

    Make Sure to change the item ID to a new int that does not alreay exist
    ............................................................................................................
    The functions to call outside this class to pickup items or drop/use items are below

    .AddToInv() This simply adds an item and amount to the inventory
    .Remove()   This simply removes a specified amount of a specified item starting from the last index
    .AddAt() / .RemoveAt() This adds/removes an amount of a specified item at a certain inded

    .........................................................................................................
    The InventorySlot class is an object that refers to each space in the inventory and holds
    info about the held item and the amount of the item in that slot.

    To check for items, check the InventorySlot list of slots
    ........................................................................................................

*/

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Inventory : MonoBehaviour
{
    
    public int invSize;
    [HideInInspector]
    public SlotHolder sHolder;
    public List<InventorySlot> invSlots = new List<InventorySlot>();

    void Awake() {
        if (invSlots.Count != invSize){
            CreateSlots();
        }
    }
    public void CreateSlots(){
        foreach (InventorySlot _slot in invSlots){
            invSlots.Remove(_slot); //Removing slots in case
        }
        for (int i=0; i<invSize; i++){
            invSlots.Add(new InventorySlot());
        }
        Debug.Log("Creating " + invSize + " slots in the inventory");
    }

    public void AddToInv(Item_ _item, int _amount){
        
        for (int i=0; i<invSlots.Count; i++){
            if(invSlots[i].slotItem == null || invSlots[i].slotItem.itemID == _item.itemID && invSlots[i].slotAmount < _item.stackSize){
                int _total = _amount + invSlots[i].slotAmount;
                if(_total > _item.stackSize ){
                    
                    int _added = _item.stackSize - invSlots[i].slotAmount;
                    int _xtra = _amount - _added;

                    invSlots[i].AddAmount(sHolder, i, _item, _added);
                    AddToInv(_item, _xtra);
                    return;

                }else{
                    invSlots[i].AddAmount(sHolder, i, _item, _amount);
                    return;
                }
            }
        }
        //If nothing is returned above, the inventory is full and should first check to see if it is full
        Debug.LogError("Added Too Much To inventory");
    }

    public void AddAt(int i, Item_ _item, int _amount){
        invSlots[i].AddAmount(sHolder, i, _item, _amount);
    }

    public void RemoveAt(int i, int _amount){ //removes at i
        invSlots[i].RemoveAmount(sHolder, i, _amount);
    }

    public void Remove(int _id, int _amount){ // removes by last index of Inv based on the item
        for (int i = invSlots.Count-1; i >= 0; i--){
            if (invSlots[i].slotItem != null && invSlots[i].slotItem.itemID == _id){
                if(invSlots[i].slotAmount - _amount < 0){
                    int _removed = invSlots[i].slotAmount;
                    int _xtra = _amount - _removed;
                    invSlots[i].RemoveAmount(sHolder, i, _removed);
                    Remove(_id, _xtra);
                    return;
                }else{
                    invSlots[i].RemoveAmount(sHolder, i, _amount);
                    return;
                }
            }
        }
    }
}



[System.Serializable]
public class InventorySlot{
    public Item_ slotItem = null;
    public int slotAmount = 0; //Dont change outside of this class

    public void AddAmount(SlotHolder _sh, int i, Item_ _item, int a){
        if(slotItem == null){
            slotItem = _item;
        }
        if (slotAmount + a <= slotItem.stackSize){
            slotAmount += a;
            _sh.SetSlot(i, slotItem.itemIcon, slotAmount);
        }else{
            Debug.LogError("Adding too many to slxot. Tried to add: " + a);
        }
    }
    public void RemoveAmount(SlotHolder _sh, int i, int a){
        if (a < slotAmount){
            slotAmount -= a;
            _sh.SetSlot(i, slotItem.itemIcon, slotAmount);
        }else if(a == slotAmount){
            ClearSlot();
            _sh.ClearSlot(i);

        }else{
            Debug.LogError("Removing too many from slot. Tried to remove: " + a);
        }
    }

    public void ClearSlot(){
        slotItem = null;
        slotAmount = 0;
    }
}