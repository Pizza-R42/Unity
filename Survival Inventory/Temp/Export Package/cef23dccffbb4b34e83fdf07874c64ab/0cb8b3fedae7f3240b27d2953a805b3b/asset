/*
This script controlls all of the UI element for the inventory slots
This script also controlles what heppens when you click a certain slot
*/

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class SlotHolder : MonoBehaviour
{
    public Sprite slotSprite;
    public Sprite hightlightSlotSprite;
    public Vector2 cellSize = new Vector2(128,128);
    public List<Slot> slotList = new List<Slot>();
    public Inventory inv;
    public InventorySlot heldSlot = new InventorySlot();
    GridLayoutGroup girdGrp;
    IEnumerator follow;
    HeldSlot hSlot;
    bool holdingItem = false;


    void Awake() {
        girdGrp = GetComponent<GridLayoutGroup>();
        girdGrp.cellSize = cellSize;
        for (int i=0; i<inv.invSize; i++){
            CreateUISlot(i);
        }
        inv.sHolder = this;
        
    }
    
    //Creates all the UI slots for the invntory and also creates the picked up item slot UI when i == -1
    void CreateUISlot(int i){
        GameObject _img = new GameObject("Item Image", typeof(Image)); 
        GameObject _txt = new GameObject("Item Text", typeof(TextMeshProUGUI));
        Image _itmImg = _img.GetComponent<Image>();
        TextMeshProUGUI _itmTxt = _txt.GetComponent<TextMeshProUGUI>();
        RectTransform _txtTrans = _txt.GetComponent<RectTransform>();
        _txtTrans.sizeDelta = cellSize;
        _itmTxt.alignment = TextAlignmentOptions.BottomRight;
        if (i>=0){
            GameObject g = new GameObject("Slot_" + i, typeof(Image), typeof(Slot));
            g.transform.SetParent(transform);
            _img.transform.SetParent(g.transform);
            _txt.transform.SetParent(g.transform);
            slotList.Add(g.GetComponent<Slot>());
            Slot _slot = g.GetComponent<Slot>();
            RectTransform _trans = g.GetComponent<RectTransform>();
            Image _imgOutline = g.GetComponent<Image>();
            _slot.setStuff(i, this, _itmImg, _imgOutline, _itmTxt, slotSprite, hightlightSlotSprite);
            _imgOutline.sprite = slotSprite;
            _trans.localScale = Vector3.one;
            _itmImg.enabled = false; //White if no image and enabled
            
        }else{
            GameObject g = new GameObject("Held Slot", typeof(RectTransform), typeof(HeldSlot));
            g.transform.SetParent(transform.parent);
            _img.transform.SetParent(g.transform);
            _txt.transform.SetParent(g.transform);
            hSlot = g.GetComponent<HeldSlot>();
            RectTransform _trans = g.GetComponent<RectTransform>();
            hSlot.setStuff(this, _itmImg,  _itmTxt);
            _trans.localScale = transform.localScale;
            hSlot.setItemUI(heldSlot.slotItem.itemIcon, heldSlot.slotAmount);
            follow = FollowMouse(_trans);
            StartCoroutine(follow);

        }
        

    }
    //Sets the UI text and sprite to the slot
    public void SetSlot(int i, Sprite _itmImg, int _amt){
        slotList[i].setItemUI(_itmImg, _amt);
    }
    //Clears the text and sprite from the slot
    public void ClearSlot(int i){
        slotList[i].removeItemUI();
    }

    //Picks up from mouse to held slot
    public void PickUpSlot(int i){
        
        if (!holdingItem){
            holdingItem = true;   
            heldSlot.slotItem = inv.invSlots[i].slotItem;
            heldSlot.slotAmount = inv.invSlots[i].slotAmount;
            CreateUISlot(-1);
        
            inv.RemoveAt(i, inv.invSlots[i].slotAmount);//Remove from inv
        }
    }

    //This makes the picked up item follow the mouse
    public IEnumerator FollowMouse(RectTransform rt){
        rt.transform.position = Input.mousePosition;
        Vector2 oldMouse = Input.mousePosition;
        while (holdingItem){
            Vector2 newMouse = Input.mousePosition;
            Vector2 delta = newMouse - oldMouse;
            
            rt.anchoredPosition += delta / rt.transform.parent.localScale;
            
            oldMouse = newMouse;
            yield return null;
        }
        
        
    }

    public void MouseClicked(int i){
        Item_ _slotItem = inv.invSlots[i].slotItem;
        int _slotAmount = inv.invSlots[i].slotAmount;
        if(holdingItem){
            if(_slotItem == null){
                inv.AddAt(i, heldSlot.slotItem, heldSlot.slotAmount);
                ClearHeldItem();
                holdingItem = false;
            }else if(_slotItem.itemID == heldSlot.slotItem.itemID ){
                if (_slotAmount + heldSlot.slotAmount <= _slotItem.stackSize){
                    //Add
                    inv.AddAt(i, _slotItem, heldSlot.slotAmount);
                    ClearHeldItem();
                    holdingItem = false;
                }else if (_slotAmount < _slotItem.stackSize){
                    //Add some
                    int _space = _slotItem.stackSize - _slotAmount;
                    inv.AddAt(i, _slotItem, _space);
                    heldSlot.RemoveAmount(this, i, _space);
                    hSlot.setItemUI(_slotItem.itemIcon, heldSlot.slotAmount);
                    SetSlot(i, _slotItem.itemIcon, _slotItem.stackSize);
                }
            }else{
                //Swap
                inv.RemoveAt(i, _slotAmount);
                inv.AddAt(i, heldSlot.slotItem, heldSlot.slotAmount);
                SetSlot(i,heldSlot.slotItem.itemIcon, heldSlot.slotAmount);
                ClearHeldItem();
                holdingItem = true;   
                heldSlot.slotItem = _slotItem;
                heldSlot.slotAmount = _slotAmount;
                CreateUISlot(-1);

                

            }
        }else{
            if(_slotItem != null){
                PickUpSlot(i);
            }
            
        }

    }

    public void MouseRightClicked(int i){
        Item_ _slotItem = inv.invSlots[i].slotItem;
        int _slotAmount = inv.invSlots[i].slotAmount;
        
        if (holdingItem){
            //Drop 1
             if(_slotItem == null || _slotItem.itemID == heldSlot.slotItem.itemID && _slotAmount < _slotItem.stackSize){
                Sprite _icon = heldSlot.slotItem.itemIcon;
                hSlot.setItemUI(_icon, heldSlot.slotAmount - 1); //HeldSlot UI
                inv.AddAt(i, heldSlot.slotItem, 1); //inv slots
                heldSlot.RemoveAmount(this, i, 1);  //Held Inv Slot
                SetSlot(i, _icon, _slotAmount + 1); //Slot UI
                if(heldSlot.slotAmount == 0){
                    ClearHeldItem();
                    holdingItem = false;
                }
            }            
            

        }else{
            //Pickup Half
            if(_slotItem != null){
                if(_slotAmount == 1){
                    PickUpSlot(i);
                }else{
                    int half = _slotAmount /2;
                    holdingItem = true;   
                    heldSlot.slotItem = _slotItem;
                    heldSlot.slotAmount = half;
                    CreateUISlot(-1);
                    inv.RemoveAt(i, half);
                    SetSlot(i, _slotItem.itemIcon, _slotAmount - half);
                }
            }
        }
    }

    //Clears the held item properties
    public void ClearHeldItem(){
        StopCoroutine(follow);
        heldSlot.slotItem = null;
        heldSlot.slotAmount = 0;
        Destroy(hSlot.gameObject);

    }
}
